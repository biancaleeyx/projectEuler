"""
Project Euler Problem 12: Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import copy
import numpy as np

# Set minimum divisors.
divisorMin = 500

# Compute triangle number.
triangle = 1

# Initialise number of triangle number.
counter = 1

# Initialise variable for number of divisors.
divisors = 1

while divisors <= divisorMin:
    # Compute next triangle number, update counter.
    counter += 1
    triangle += counter

    # Prime factorisation of triangle number.
    number = copy.deepcopy(triangle)
    primeFactors = []
    for n in range(2, number):
        # Check if number has been processed already.
        while number % n == 0:
            number /= n
            primeFactors.append(n)
        if number == 1:
            break

    primes, counts = np.unique(np.array(primeFactors), return_counts=True)

    # Calculate number of factors = number of combinations of primes.
    # Combination: choice of 0 to max count for each prime, multiplied by each other.
    divisors = 1
    for count in counts:
        divisors *= count+1

# Divisors exceeded minimum number of divisors, output triangle number.
print(triangle)
